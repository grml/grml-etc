#!/bin/bash
# Filename:      grml-reboot
# Purpose:       reboot grml system
# Authors:       grml-team (grml.org)
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
################################################################################

export PATH=/sbin:/bin:/usr/bin:/usr/sbin

. /usr/lib/grml/core.sh
. /etc/grml_colors
. /etc/grml/lsb-functions

cd /

# Clean input/output
CONSOLE=/dev/console
[ -c "$CONSOLE" ] && exec >"$CONSOLE" 2>&1 <"$CONSOLE"

# default variables
INSTALLED=false
REMOVABLE=false
USB_DEVICE=false
NOPROMPT=${NOPROMPT:-false}
NOEJECT=${NOEJECT:-false}

# Check if we are running from a GRML-CD or HD
[ -e /etc/grml_cd ] || INSTALLED=true

# Assume that we don't want the eject+prompt stuff when running in one
# of the special modes:
checkbootparam 'toram'   || checkbootparam '2ram' || checkbootparam 'usb' \
checkbootparam 'serial'  || checkbootparam 'fromhd' || checkbootparam 'isofrom' \
checkbootparam 'fromiso' || checkbootparam  'findiso' && INSTALLED=true

# detect cdrom device
if ! $INSTALLED ; then
   # new live-initramfs layout:
   if [ -d /live/image ] ; then
      CDROM="$(awk '/ \/live\/image /{print $1;exit 0;}' /proc/mounts)"
      MOUNTPATH="/live/image"
   else # old unionfs layout:
      CDROM="$(awk '/ \/cdrom /{print $1;exit 0;}' /proc/mounts)"
      MOUNTPATH="/cdrom"
   fi

   # try to remove only removable devices
   DEVICE=""
   if [ -n "$CDROM" ] ; then
     DEVICE="${CDROM##/dev/}"
     [ -d /sys/block/${DEVICE} ] || DEVICE="${DEVICE%%[0-9]*}"

     if [ -n "$DEVICE" ] ; then
       # is it a removable device?
       [ "$(cat /sys/block/${DEVICE}/removable 2>/dev/null)" = "1" ] && REMOVABLE=true
       # is it a usb device?
       readlink /sys/block/${DEVICE} 2>/dev/null | grep -q '/usb' && USB_DEVICE=true
       $USB_DEVICE && USB_INFO=" ($(cat /sys/block/${DEVICE}/device/model 2>/dev/null))"
     fi
   fi
fi

case "$0" in
  *halt)
        level=0
        message="grml system will be halted..."
        command="halt"
        ;;
  *reboot)
        level=6
        message="Preparing for reboot..."
        command="reboot"
        ;;
  *)
        echo "Usage: call this script as \"halt\" or \"reboot\" please.">&2
        exit 1
        ;;
esac

mysleep() {
  for i in $(seq 1 40) ; do
    usleep 75000
    echo -n "$1.${NORMAL}"
  done
  echo ""
}

# Disable kernel messages
echo "0" > /proc/sys/kernel/printk

# make sure halt/reboot commands are available even if
# someone is using shutdown command or nfsroot is used:
cat /sbin/halt /sbin/reboot /etc/init.d/$command /etc/init.d/ups-monitor \
       /etc/apcupsd/powerfail >/dev/null 2>&1

# We may kill our network connection here before unmounting NFS. Bad luck.
if [ -d /sys/bus/pcmcia -a -x /sbin/pccardctl ] ; then
   # make sure we don't lose any data, see issue219 for details
   log_begin_msg "Syncing devices..."
   sync ; log_end_msg $?
   log_begin_msg "Shutting down PCMCIA devices..."
   pccardctl eject >/dev/null 2>&1
   log_end_msg $?
fi

if $INSTALLED ; then
   log_begin_msg_nn "Running /etc/init.d/rc ${level}: "
   /etc/init.d/rc $level 1>/dev/null 2>&1 &
   mysleep "$GREEN"
   log_end_msg 0
fi

# Remove all truecrypt mappings...
if [ -x /usr/sbin/truecrypt ] ; then
   if grep -q truecrypt /proc/modules ; then
      log_begin_msg "Unmapping truecrypt volumes."
      MSG=$(truecrypt -d 2>1)
      echo $MSG | grep "No volumes mapped" && eend 0
      [ -z "$MSG" ] && eend 0 || eend 1
   fi
fi

# Now kill them all
killall5 -15
sleep 1
log_begin_msg_nn "Sending all processes the TERM signal: "
mysleep "$BLUE" ; log_end_msg $?

killall5 -9
sleep 1
log_begin_msg_nn "Sending all processes the KILL signal: "
mysleep "$RED" ; log_end_msg $?

# Turn off swap, then unmount file systems.
log_begin_msg "Turning off swap."
swapoff -a >/dev/null 2>&1 ; log_end_msg $?

# Udev
log_begin_msg "Deactivating udev:"
echo -n "   ${GREEN}-${NORMAL} "
/etc/init.d/udev stop ; log_end_msg $?

# noprompt and noeject handling
case "$CMDLINE" in
  *noprompt*) NOPROMPT=true ; ;;
  *noeject*)  NOEJECT=true ; ;;
esac
[ -r /etc/noprompt ] && NOPROMPT=true
[ -r /etc/noeject ]  && NOPROMPT=true && NOEJECT=true

# Turn on autoeject of CD-ROMs
if $NOEJECT ; then
   for dev in /proc/sys/dev/cdrom*/lock;      do [ -f "$dev" ] && echo 0 > "$dev"; done
   for dev in /proc/sys/dev/cdrom*/autoeject; do [ -f "$dev" ] && echo 1 > "$dev"; done
fi

# Umount file systems
log_begin_msg "Syncing local filesystems..."
sync && sleep 1 ; log_end_msg $?

log_begin_msg "Unmounting file systems."

# Be safe in case someone messed with /etc/mtab
if ! $INSTALLED ; then
   rm -f /etc/mtab
   ln -snf /proc/mounts /etc/mtab
fi

# Free loopback devices if necessary, so we can unmount the host media
for i in /dev/loop*; do losetup -d $i 2>/dev/null; done

umount -t notmpfs,nosysfs,noproc,nousbfs -adrvf 1>/dev/null 2>&1

log_end_msg 0

# Network stuff
log_begin_msg "Unmounting network filesystems"
umount -t nfs,nfs4,smbfs -alvf 2>/dev/null ; log_end_msg $?

NETDEVICES="$(/sbin/ifconfig | awk '/^[^ ]+/ {print $1}' | grep -v '^lo$')"
if [ -n "$NETDEVICES" ]; then
   pidof pump >/dev/null 2>&1 && { pump -k ; sleep 2; }
   killall dhclient dhclient3 2>/dev/null
   log_begin_msg "Shutting down network device..."
   for n in $NETDEVICES; do
       echo "${SUBMSG} ${WHITE}$n${NORMAL}"
       ifdown $n 1>/dev/null 2>&1
       ifconfig $n down
   done ; log_end_msg $?
fi

# For a harddisk installation: mount / ro
$INSTALLED && mount -n -o remount,ro / 2>/dev/null

# Prompt for removal of live system device
if ! $INSTALLED && ! $NOPROMPT ; then
   # do not prompt for removal when running in grml2ram mode:
   if ! mount | grep -qe 'on /cdrom' -qe 'on /live/image' ; then
      echo "Live System not mounted, nothing to eject therefore."
   else
      [ -d "$MOUNTPATH" ] && umount -l "$MOUNTPATH"
      if ! $NOEJECT && [ -n "$CDROM" ]  ; then
         $REMOVABLE && eject -p "$CDROM" 2>/dev/null
      fi
      echo
      if $USB_DEVICE ; then
        # if we do not have any information about the usb model then fallback to the device name instead
        [ -n "$USB_INFO" ] || USB_INFO=" (${CDROM})"
        read -s -p "${GREEN}Please remove the USB device${USB_INFO} and press ENTER to continue [auto 2 minutes].${NORMAL}" -t 120 a
      else
        [ -n "$CDROM" ] && CDROM=" (${CDROM})"
        read -s -p "${GREEN}Please remove the live system${CDROM}, close the tray (if any) and press ENTER to continue [auto 2 minutes].${NORMAL}" -t 120 a
      fi
   fi
fi

echo
echo "$message" >/dev/console

# Finally halt or reboot
/etc/init.d/$command stop

## END OF FILE #################################################################
